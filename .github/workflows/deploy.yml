name: Deploy
on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GKE_CLUSTER: swiftfiddle-cluster
  GKE_ZONE: us-central1-c
  GCR_HOSTNAME: us.gcr.io
  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}
  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Update Package.swift.json
        run: |
          set -ex

          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git pull --rebase origin master

          tempdir=$(mktemp -d)
          filename="Package.swift"
          curl -sfL -o "$tempdir/$filename" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename
          swift package --package-path "$tempdir" dump-package > Resources/$filename.json

          git add Resources/$filename.json
          git diff-index --quiet HEAD || git commit -m "Update $filename.json"
          git push origin master

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Docker Images
        run: |
          set -ex

          IMAGE_TAG=${{ env.GCR_HOSTNAME }}/${{ env.PROJECT_ID }}/web-frontend:latest

          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ env.GCP_SA_KEY }}

      - name: Deploy
        run: |
          set -ex

          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git pull --rebase origin master

          commit_sha=$(git rev-parse HEAD)
          sed "s/%COMMIT_SHA%/$commit_sha/g;" "k8s/pod_template.yaml" > "k8s/pod.yaml"

          kubectl apply -f k8s/pod.yaml

          kubectl rollout status deployment/web-frontend
          kubectl get services -o wide

          git add k8s/pod.yaml
          git diff-index --quiet HEAD || git commit -m "Deploy to GKE $(git rev-parse --short HEAD)"
          git push origin master

  purge_cache:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Purge Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}" \
            -H "X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}" \
            -H "Content-Type:application/json" \
            --data '{"purge_everything":true}'

  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Test
        run: |
          set -ex

          curl --silent --show-error --fail -i -X POST "https://swiftfiddle.com/run" \
            -H "Content-Type:application/json" \
            --data '{"code":"print(\"Hello, World!\")","toolchain_version":"latest"}'
          curl --silent --show-error --fail -i -X POST "https://swiftfiddle.com/run" \
            -H "Content-Type:application/json" \
            --data '{"code":"print(\"Hello, World!\")","toolchain_version":"stable"}'

          versions=$(curl --silent -X GET "https://swiftfiddle.com/versions" -H "Content-Type:application/json")
          len=$(echo $versions | jq length)
          for i in $( seq 0 $(($len - 1)) ); do
            version=$(echo $versions | jq .[$i])
            curl --silent --show-error --fail -i -X POST "https://swiftfiddle.com/run" \
              -H "Content-Type:application/json" \
              --data "{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":$version}"
          done
