name: Deploy
on:
  push:
    branches: [master]
  schedule:
    - cron: "0 15 * * *"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          set -ex

          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          TERM=xterm ssh -t -t -o 'StrictHostKeyChecking no' "${{ secrets.SSH_LOGIN_USER }}@${{ secrets.SSH_HOST }}" "grep "^docker:" /etc/group | sed -e 's/^[^:]\+:[^:]\+:\([^:]\+\):[^:]\+$/\1/g'" > gid
          REMOTE_DOCKER_GID=$(echo $(tail -n 1 gid) | sed -e 's/\r//g')

          docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker build \
            --build-arg \
              HOST_DOCKER_GROUP_ID=$REMOTE_DOCKER_GID \
            --rm --no-cache --tag kishikawakatsumi/swift-playground .
          docker push kishikawakatsumi/swift-playground

          TERM=xterm ssh -t -t -o 'StrictHostKeyChecking no' "${{ secrets.SSH_LOGIN_USER }}@${{ secrets.SSH_HOST }}" <<EOC
          set -ex

          cd "\$HOME/app"
          git pull --rebase origin master

          dc='docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "\$PWD:\$PWD" -w="\$PWD" docker/compose:latest'
          eval \$dc pull
          eval \$dc up --detach --remove-orphans app carbonara nginx-proxy letsencrypt

          docker image prune --force

          exit 0
          EOC

      - name: Purge Cache
        run: |
          set -ex

          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "X-Auth-Email: ${{ secrets.CLOUDFLARE_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CLOUDFLARE_API_KEY }}" \
            -H "Content-Type:application/json" \
            --data '{"purge_everything":true}'
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test
        run: |
          set -ex

          curl --silent -i -X POST "https://swiftfiddle.com/run" \
            -H "Content-Type:application/json" \
            --data '{"code":"print(\"Hello, World!\")","toolchain_version":"latest"}'
          curl --silent -i -X POST "https://swiftfiddle.com/run" \
            -H "Content-Type:application/json" \
            --data '{"code":"print(\"Hello, World!\")","toolchain_version":"stable"}'
            set -ex

          versions=$(curl --silent -X GET "https://swiftfiddle.com/versions" -H "Content-Type:application/json")
          len=$(echo $versions | jq length)
          for i in $( seq 0 $(($len - 1)) ); do
            version=$(echo $versions | jq .[$i])
            curl --silent -i -X POST "https://swiftfiddle.com/run" \
              -H "Content-Type:application/json" \
              --data "{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":$version}"
          done
